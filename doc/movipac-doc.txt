General
=======

The LocVib tools, which are included in the MoViPac package, provide a 
number of features for analyzing calculated vibrational spectra in terms
of localized modes. For details on the theoretical background, see
   Ch. Jacob, M. Reiher, J. Chem. Phys. 130 (2009), 084106.
Please also cite this reference in publications using the LocVib tools.

The most recent versions of LocVib will be made available at
   http://www.christophjacob.eu/locvib.php
On this website, a detailed documentation describing all the
advanced functionality of LocVib will also be available soon.


Installation
============

The LocVib tools are distributed as a Python library. To use them,
you have to include the subdirectory 'LocVib/VibTools' in your
PYTHONPATH environment variable.

LocVib relies on additional Python packages, that have to be installed on your system:
- the Openbabel package (http://openbabel.org), including its Python bindings
- the Matplotlib package (http://matplotlib.sourceforge.net)
These are available as standard packages for most Linux distributions.

The LocVib tools can then be used in Python scripts to perform an
analysis of vibrational spectra in terms of localized modes. A few
example scripts, that can serve as starting point for more complicated
applications, are provided in the subdirectory 'LocVib/examples'. These
will be used to explain the most important features in the following.
 

Reading Results from SNF or AKIRA
=================================

For using the LocVib tools in a Python script is to import them with

import VibTools

The first step then to read in the results of a previous SNF or AKIRA
calculation this can be done with the classes SNFResults and AKIRAResults,
respectively. For SNF, one can use

res = VibTools.SNFResults()
res.read()

This requires the files coord (with the molecular coordinates in Turbomole
format), the 'restart' file produced by snfdc, and the output file from
SNF snf.out to the present in the current directory. Alternative names and
locations of these files can be passed to SNFResults.  For more details
and additional options, see the source code in PySNF.py.

Similarly, AKIRA results can be read with

res = VibTools.AKIRAResults()
res.read()

This requires the files coord and akira_iterations.out. For more details
and additional options, see the source code in PyAKIRA.py.

The resulting instances of the result files then give access to the 
normal modes, their frequencies, and the calculated vibrational intensities.
See the source code in Results.py for more details.


Assigning Normal Modes to Bands
===============================

For performing an analysis in terms of localized modes, one has to assign
the normal modes to different vibrational bands. To perform this assignment,
it is useful to consider the contributions of different groups of atoms to
each of the normal modes. An example of a script to assist with such an
assignment is inculded as '1_composition.py'.

This script prints a list of the normal modes and for each mode lists the
contributions of different atom types. For instance, for the included example
of an (Ala)$_{10}$ helix, one obtains the output:

                                                   NH      CO      CA      HA     CHB   
[...]
236 1500.0    54.6596     0.7737     0.0046      76.0    17.7     2.2     1.4     2.7  
237 1503.7   189.3569     1.8920     0.0341      74.5    17.7     2.8     2.3     2.7  
238 1506.4   217.9075     7.7164    -0.0585      75.1    16.3     2.8     2.7     3.2  
239 1508.5   407.3909     6.8705    -0.0143      76.4    18.1     2.3     1.1     2.2  
240 1617.6    53.4093     8.3601    -0.0152      98.4     0.3     0.8     0.2     0.3  
241 1644.0    22.0081     1.8999     0.0294       3.0    94.1     0.9     1.5     0.5  
242 1650.0   322.4753    17.5984     0.0226       3.3    94.2     0.6     1.4     0.5  
243 1651.1  1361.5743   112.2062     0.0108       5.1    93.3     0.2     0.8     0.5  
244 1656.1   232.1278     2.5841    -0.0374       3.5    94.3     0.5     1.3     0.4  
245 1657.2    41.6081     1.2601    -0.0010       4.4    93.9     0.3     1.0     0.4  
246 1663.7    86.5379     1.8897    -0.0026       3.3    94.5     0.6     1.1     0.4  
247 1668.3   247.8201     8.6080     0.0088       2.4    96.2     0.5     0.4     0.5  
248 1670.0   290.1721    24.3792     0.0023       4.0    94.4     0.3     0.9     0.4  
249 1677.3   217.4265     9.0573     0.0112       3.0    95.6     0.4     0.5     0.4  
250 1736.0   326.1756    11.9512     0.0017       2.5    96.7     0.4     0.0     0.3  

Thus, based on the atomic contributions and the vibrational wavenumbers listed in the
second column one can notice that modes 240 to 240 are similar vibrations and form one
band (mode 250 appears at significantly higher wavenumber and is, therefore, not included).
These are the amide~I vibrations, which can be further analyzed now.

The assignment of the atom types is, of course, dependent on the class of molecules considered.
For polypeptides, these are assigned with the help of Openbabel, and several different collections
of atom types are provided. See the source code in Molecule.py for more details.


Localization of Normal Modes
============================

After identifying which modes contribute to one band, these can be transformed to
localized modes for further analysis. An example of this step given in the script
'2_locmodes.py'.

First, the relevant subset of the normal modes is selected with

modes = res.modes.get_subset(range(241,250))

The functionality for localizing normal modes is provided by the class LocVib. An
instance of this class is created with 

lv = VibTools.LocVib(modes, 'PM')

where 'PM' selects the atomic-contribution localization criterion (in analogy to
the Pikek-Mezey orbital localization). Alternatively, 'Boys' can be used to chose
the distance-criterion for the localization instead. Then,

lv.localize()

performs the iterative localization. If convergence problems are encountered in this
step, the set of normal modes has probably been poorly chosen and the assignment
should be revisted. Finally, in polypeptides the localized modes can be sorted by
residue with

lv.sort_by_residue().

After the localization has been performed, the localized modes are available in
lv.locmodes. For instance, they can be saved to a g98-type file for visual inspection
with 

lv.locmodes.write_g98out(filename="locmodes-amide1.out")

The example script also demonstrates how the composition on the localized modes
can be analyzed and how intensities of localized modes can be obtained. For more
details, see the source code of '2_locmodes.py'.


Coupling Constants
==================

After the localization has been performed for a set of normal modes, coupling
constants can also be extracted. An example is provided in the script '3_couplings.py'.
The sign of the coupling constants depends on the phase of the localized modes. With

lv.adjust_signs()

the phase of the localized modes is adjusted such that the nearest-neighbor vibrational
coupling constants are positive. However, that does not necessarily imply that the
phase is chosen consistently for all localized modes. This can at present only be
ensured by visually inspecting the localized modes and, if necessary, inverting their
signs with lv.invert_signs([]) (which takes a list of localized mode indices as argument).

The vibrational coupling constants, i.e., the elements of the Hessian matrix in the basis 
of the localized modes, can be extracted with

cmat = lv.get_couplingmat()

The intensity coupling matrices are available via the LocModeAnalysis class. See the
example and the source code for further details.


Advanced Features
=================

The LocVib tools provide a number of additional functionalities, for instance for
plotting vibrational spectra and coupling matrices. For more details on these tools,
we refer to the source code and to the extended documentation that will be made available
at http://www.christophjacob.eu/locvib

